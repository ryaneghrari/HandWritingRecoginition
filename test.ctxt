#BlueJ class context
comment0.params=m
comment0.target=int\ getMax(Jama.Matrix)
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment2.params=trainingData\ outputData\ thetaValues\ lambdaValue
comment2.target=double\ jTheta(Jama.Matrix[],\ Jama.Matrix[],\ Jama.Matrix[],\ double)
comment3.params=input\ theta1\ theta2
comment3.target=Jama.Matrix\ computeHypothesis(Jama.Matrix,\ Jama.Matrix,\ Jama.Matrix)
comment3.text=\ \n\ This\ method\ takes\ as\ input\ a\ single\ input\ vector\ (without\ bias\ unit\ --\ you'll\ need\ to\ add\ that),\ along\ with\ the\ weight\ matrices,\ and\n\ computes\ the\ output\ vector\ of\ the\ neural\ network.\ That\ is,\ it\ performs\ forward\ propagation.\n
comment4.params=
comment4.target=void\ aidanTest()
comment5.params=m
comment5.target=double\ sumSquaredMatrixEntries(Jama.Matrix)
comment5.text=\ You\ don't\ have\ to\ code\ this,\ but\ you\ might\ find\ it\ helpful\ for\ computing\ jTheta.\ \ \n\ It\ takes\ as\ input\ a\ matrix.\ \ It\ computes\ the\ sum\ of\ the\ squares\ of\ each\ matrix\ entry,\n\ with\ the\ exception\ of\ the\ first\ column\ of\ the\ matrix,\ which\ it\ ignores.\n
comment6.params=rows\ cols\ epsilon
comment6.target=Jama.Matrix\ createInitialTheta(int,\ int,\ double)
comment7.params=x
comment7.target=double\ logisticFunction(double)
comment8.params=x
comment8.target=Jama.Matrix\ logisticFunction(Jama.Matrix)
comment9.params=inputs\ biasVal
comment9.target=Jama.Matrix\ addBiasUnit(Jama.Matrix,\ double)
numComments=10
